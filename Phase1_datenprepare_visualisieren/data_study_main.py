""" Daten ablesen und für die Modellbildung vorbereitenDie Daten aus den vorgegebenen .txt* Datei ablesen, nicht aufgefassennen Daten werden als NaN ergänztDie wichtigen Parameter heraussuchen, möglich sind ("Gear","amb","HCnt"...)Eine Analyse-report durch Pandas_profiling herstellen, umd einen Überblick der Daten herzustellenDie Daten visualisieren, inkulusiv zeitliche Verlauf, linearregrassion je eines Zeitintervall (90 Tagen hier)"""import datetimeimport osimport matplotlibimport matplotlib.pyplot as pltimport numpy as npimport pandas as pdfrom ml_dataprocessing_txttocsv import ml_data_processing_txt2cavfrom visualisation import interval_reg, normal_drawfrom pandas_profiling import ProfileReport# ob man Daten konvertieren muss (1: ja, 0: nein)data_convert = 1# Speicherort der Daten auswaehlenpath_data = 'E:\\0000_Daten\\0000_Daten'# Die Zeichnung direkt abspeichern ohne vorzustellenmatplotlib.use('agg')# Die Daten konvertieren zu csv Dateiif data_convert == 1:    ml_data_processing_txt2cav(path_data)# startenfolder = ['Workpart1_WTG', 'Workpart2_WTG']for folder_name in folder:    file_path = 'E:\\csv_data_group_8\\' + folder_name    print('working on ' + folder_name)    file_name = os.listdir(file_path)    for file in file_name:        if os.path.splitext(file)[1] == '.csv':            # Die komplette Daten ablesen als DataFrame            frame = pd.read_csv(file_path + '\\' + file)            # Die Namen der Parameter            col_WTG = np.array(frame.keys()[1:])            # die Parametern bezueglich des Gearbox herausfinden            mask = []            for i, x in enumerate(col_WTG):                # durch keyword die wichtigen Parameter heraussuchen ('amb','hcnt' auch wichtig)                if 'gear' in x.lower() or 'pctimestamp' in x.lower():                    mask.append(1)                else:                    mask.append(0)            mask = np.array(mask)            col_WTG_gear = col_WTG[mask == 1]            if col_WTG_gear.size == 0:                print('kein Parametern bezueglich des Gearbox')            else:                print(col_WTG_gear)            data_gearbox = frame[col_WTG_gear]            del frame            # entfernen die durch nan befuellten Spalten            data_gearbox.dropna(axis=1, how='all', inplace=True)            # nan-Werten durch 0 ergaenzen            data_gearbox_real = data_gearbox.fillna(0)            # Der Parameter "PCTimeStamp" vom string-Daten zu Datetime-Daten umsetzen            a = list(data_gearbox_real['PCTimeStamp'])            b = []            for j, time in enumerate(a):                b.append(datetime.datetime.strptime(time, "%Y-%m-%d %H:%M:%S"))            data_gearbox_real['PCTimeStamp'] = b            index = range(len(data_gearbox_real))            data_gearbox_real.index = index            # Eine Profilereport herstellen (histogramm, Korrelation usw.)            profile = ProfileReport(data_gearbox_real, title='Pandas Profiling Report',                                    html={'style': {'full_width': True}})            profile.to_file(output_file="profile_report.html")            # normale zeitliche Verlauf            plt.figure(figsize=(40, 60))            normal_draw(data_gearbox_real)            plt.suptitle(file.split(sep='.')[0], fontsize=20)            plt.savefig(file_path + '\\' + file.split(sep='.')[0] + '_normal_verlauf.png')            # linear regression je 3 Monaten            plt.figure(figsize=(40, 60))            # 90D steht für 3 Monaten            interval_reg(data_gearbox_real, '90D')            plt.suptitle(file.split(sep='.')[0], fontsize=20)            plt.savefig(file_path + '\\' + file.split(sep='.')[0] + '_linreg.png')print('fertig gezeichnet!')